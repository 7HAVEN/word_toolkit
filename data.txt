MNNs mechanically learn behaviors analogously to how ANNs mathematically map numerical inputs to outputs. To understand the specifics of how MNNs learn, consider the eight-layer-deep 2D MNN lattice of tunable beams packed in a triangular configuration with eight input and output nodes shown in Fig. 1B. The black bars shown at the top and bottom of the lattice represent fixed ground. Suppose that when the input nodes are loaded by equal horizontal forces, shown as red arrows in Fig. 1B, it is desired that the output nodes respond by moving to target displacements along the contour of the red sinusoidal curve shown in Fig. 1B. To learn this behavior in the midst of unexpected and changing loading scenarios, each tunable beam in the lattice would be prescribed with a random stiffness value. Sensors (e.g., strain gauges on each beam) would then determine the displacement of each node in the lattice for each loading scenario. Because the beam stiffness values and the node displacements are known (i.e., prescribed and measured, respectively), the MNN could determine when the lattice has been loaded with the desired behavior’s loading scenario (i.e., the horizontal forces shown in Fig. 1B). Anytime the desired loading scenario occurs, the lattice sensors would measure the resulting displacements of the output nodes on the lattice’s right side, and the mean squared error (MSE) of these displacements would be calculated by subtracting them from the target displacements and averaging the resulting differences squared. The tunable beams would then change their stiffness values according to an optimization algorithm such that when the process of loading, measuring, and calculating the MSE is repeated, the MSE is minimized until a working combination of beam stiffness values is identified. One possible combination of beam stiffness values that achieve the desired behavior of Fig. 1B is shown on the left side of Fig. 1D. Different shades of blue are used to denote different axial stiffness values.
Suppose that it is desired that the MNN learns another behavior in addition to retaining the first behavior shown in Fig. 1B. Specifically, suppose that it is desired that the lattice’s output nodes displace to an inverted sinusoidal contour, shown as a green curve on the right side of Fig. 1D, in response to its input nodes being loaded by equal vertical input forces, shown as green arrows, instead. To learn the new behavior while maintaining the ability to simultaneously achieve the first behavior, the lattice of tunable beams would begin with the combination of stiffness values that were found to successfully achieve the first behavior. Then, those stiffness values would be adjusted according to the same optimization algorithm to find a new combination of stiffness values that achieve both behaviors simultaneously. This optimization would be achieved by measuring the displacements of the output nodes in response to loading the material’s input nodes with alternating horizontal and vertical forces. A single MSE would be calculated that simultaneously considers the results of both loading scenarios. That cumulative MSE would then be minimized so that a desired combination of beam stiffness values would be identified that successfully produced both the new and original behavior. Note that all the tunable beams are colored with the same shades of blue between the two corresponding lattice images of Fig. 1D because a single combination of stiffness values was identified that could successfully enable the MNN to achieve both behaviors.
Because MNNs typically have multiple layers, they can learn the same set of desired behaviors using many different combinations of beam stiffness values. Note that although solution 2 of Fig. 1E exhibits the same desired behaviors as solution 1 of Fig. 1D, it does so with a different combination of beam stiffness values. The fact that many different combinations of beam stiffness values can achieve the same behaviors enables MNNs to learn many new behaviors. Moreover, MNNs do not need to be configured, fixtured, or loaded as shown in the example of Fig. 1B to learn. Any combination of nodes within an MNN could be fixed, loaded as an input, and sensed as an output to learn almost any mechanical behaviors desired.